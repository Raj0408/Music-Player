import 'dart:convert' as convert;import 'package:http/http.dart' as http;import 'package:harmonoid/core/collection.dart';import 'package:harmonoid/utils/utils.dart';const String REQUEST_AUTHORITY = 'music.youtube.com';const String REQUEST_KEY = 'AIzaSyC9XL3ZjWddXya6X74dJoCTL-WEYFDNX30';const Map<String, String> REQUEST_HEADERS = {'accept': '*/*','accept-language': 'en-GB,en;q=0.9,en-US;q=0.8','content-type': 'application/json','dpr': '2','sec-ch-ua-arch': '','sec-fetch-dest': 'empty','sec-fetch-mode': 'same-origin','sec-fetch-site': 'same-origin','x-origin': 'https://music.youtube.com','x-youtube-client-name': '67','x-youtube-client-version': '1.20210823.00.00',};const Map<String, dynamic> REQUEST_PAYLOAD = {'context': {'client': {'clientName': 'WEB_REMIX','clientVersion': '0.1','newVisitorCookie': true,},'user': {'lockedSafetyMode': false,}}};abstract class Client {static Future<http.Response> request(String path, Map<String, String> properties) async {var response = await http.post(Uri.https(REQUEST_AUTHORITY, '/youtubei/v1/$path', {'key': REQUEST_KEY,}),headers: REQUEST_HEADERS,body: convert.jsonEncode({...REQUEST_PAYLOAD,...properties,}));return response;}}abstract class YTM {static Future<List<Track>> search(String query) async {var result = [];var response = await Client.request('search', {'query': query,'params': 'EgWKAQIIAWoMEAMQBBAOEAoQBRAJ',});var body = convert.jsonDecode(response.body)['contents'];if (body.containsKey('tabbedSearchResultsRenderer')) {body = body['tabbedSearchResultsRenderer']['tabs'].first['tabRenderer']['content'];} else {body = body['contents'];}try {body = body['sectionListRenderer']['contents'].first['musicShelfRenderer']['contents'];} catch (exception) {return [];}for (var object in body) {object = object['musicResponsiveListItemRenderer'];try {var metas = object['flexColumns'][1]['musicResponsiveListItemFlexColumnRenderer']['text']['runs'].map((meta) => meta['text']).toList().join(' ');var duration = metas.split('\u2022')[2].trim();duration = int.parse(duration.split(':').first) * 60 +int.parse(duration.split(':')[1]);var track = Track(trackId: object['flexColumns'].first['musicResponsiveListItemFlexColumnRenderer']['text']['runs'].first['navigationEndpoint']['watchEndpoint']['videoId'],trackName: object['flexColumns'].first['musicResponsiveListItemFlexColumnRenderer']['text']['runs'].first['text'],trackArtistNames: metas.split('\u2022').first.split(RegExp(',|&')).map((meta) => meta.trim()).toList().cast<String>(),albumArtistName: metas.split('\u2022').first.split(RegExp(',|&')).map((meta) => meta.trim()).toList().cast<String>().first,trackDuration: duration * 1000,networkAlbumArt: object['thumbnail']['musicThumbnailRenderer']['thumbnail']['thumbnails'].last['url'].replaceAll(RegExp('w...-h...-l90'), 'w480-h480-l90'),albumId: object['menu']['menuRenderer']['items'][object['menu']['menuRenderer']['items'].length - 3]['menuNavigationItemRenderer']['navigationEndpoint']['browseEndpoint']['browseId'],albumName: metas.split('\u2022')[1].trim());result.add(track);} catch (exception, stacktrace) {print(exception);print(stacktrace);}}return result.cast();}static Future<Track?> identify(String query) async {String? id;if (query.contains('youtu') && query.contains('/')) {if (query.contains('/watch?v=')) {id = query.substring(query.indexOf('=') + 1);} else {id = query.substring(query.indexOf('/') + 1);}}id = id?.split('&').first.split('/').first;if (id == null) return null;try {var video = await http.get(Uri.https('www.youtube.com', '/watch', {'v': id,}));var body = video.body.split(';</script>');var response = convert.jsonDecode(body[body.length - 3].split('var ytInitialData = ').last)['contents']['twoColumnWatchNextResults']['results']['results']['contents'];var description = response[1]['videoSecondaryInfoRenderer']['description']['runs'][0]['text'];var trackArtistNames;var albumName;try {trackArtistNames = description[1].split(" Â· ").sublist(1).map((meta) => meta.trim()).toList().cast<String>();albumName = description[2].trim();} catch (exception) {trackArtistNames = [response[1]['videoSecondaryInfoRenderer']['owner']['videoOwnerRenderer']['title']['runs'][0]['text'],].cast<String>();}return Track(trackId: id,trackName: response[0]['videoPrimaryInfoRenderer']['title']['runs'][0]['text'],trackArtistNames: trackArtistNames,albumArtistName:trackArtistNames.isNotEmpty ? trackArtistNames.first : null,albumName: albumName ?? 'Unknown Album',networkAlbumArt: 'https://img.youtube.com/vi/$id/0.jpg');} catch (exception, stacktrace) {print(exception);print(stacktrace);throw Exception();}}static Future<List<String>> suggestions(String query) async {var response = await Client.request('music/get_search_suggestions', {'input': query,});var body = convert.jsonDecode(response.body)['contents'][0]['searchSuggestionsSectionRenderer']['contents'];var result = <String>[];for (var object in body) {if (object.containsKey('searchSuggestionRenderer')) {result.add(object['searchSuggestionRenderer']['suggestion']['runs'].map((text) => text['text']).toList().join(''));}}return result;}}extension TrackExtension on Track {Future<void> attachAudioStream() async {if (filePath != null) return;try {var video = await http.get(Uri.https('www.youtube.com', '/watch', {'v': trackId,}));var body = video.body.split(';</script>');var response = convert.jsonDecode(body[body.length - 5].split('var ytInitialPlayerResponse = ').last);extras = response['videoDetails']['shortDescription'];var opus;var mp4;var aac;for (var format in response['streamingData']['adaptiveFormats']) {print(format['itag']);if (format['itag'] == 251) opus = format['signatureCipher'];if (format['itag'] == 18) mp4 = format['signatureCipher'];if (format['itag'] == 140) aac = format['signatureCipher'];}print(opus ?? mp4 ?? aac);var stream = await http.get(Uri.parse('https://yt-music-headless.vercel.app/decipher?${opus ?? mp4 ?? aac}'));print(stream.body);if (stream.statusCode != 200) {Utils.handleYouTubeFailure();return;}filePath = stream.body;} catch (exception, stacktrace) {print(exception);print(stacktrace);}}Future<List<Track>> get recommendations async {var result = [];var response = await Client.request('next', {'enablePersistentPlaylistPanel': 'true','isAudioOnly': 'true','params': 'wAEB','tunerSettingValue': 'AUTOMIX_SETTING_NORMAL','videoId': trackId!,});var body = convert.jsonDecode(response.body)['contents']['singleColumnMusicWatchNextResultsRenderer']['tabbedRenderer']['watchNextTabbedResultsRenderer']['tabs'][0]['tabRenderer']['content']['musicQueueRenderer']['content']['playlistPanelRenderer']['contents'];for (var object in body) {object = object['playlistPanelVideoRenderer'];try {var metas = object['longBylineText']['runs'].map((meta) => meta['text']).toList().join(' ');var duration = object['lengthText']['runs'][0]['text'];duration = int.parse(duration.split(':').first) * 60 +int.parse(duration.split(':')[1]);var track = Track(trackId: object['videoId'],trackName: object['title']['runs'][0]['text'],trackArtistNames: metas.split('\u2022').first.split(RegExp(',|&')).map((meta) => meta.trim()).toList().cast<String>(),albumArtistName: metas.split('\u2022').first.split(RegExp(',|&')).map((meta) => meta.trim()).toList().cast<String>().first,trackDuration: duration * 1000,networkAlbumArt: object['thumbnail']['thumbnails'][object['thumbnail']['thumbnails'].length - 2]['url'],albumId: object['menu']['menuRenderer']['items'][object['menu']['menuRenderer']['items'].length - 2]['menuNavigationItemRenderer']['navigationEndpoint']['browseEndpoint']['browseId'],albumName: metas.split('\u2022')[1].trim());result.add(track);} catch (exception, stacktrace) {print(exception);print(stacktrace);}}return result.cast();}}